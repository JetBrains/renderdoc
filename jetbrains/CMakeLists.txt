cmake_minimum_required(VERSION 3.11.0)

include("CMake.Variables.cmake")
include(FetchContent)

# assume built-in pthreads on MacOS
IF(APPLE)
    set(CMAKE_THREAD_LIBS_INIT "-lpthread")
    set(CMAKE_HAVE_THREADS_LIBRARY 1)
    set(CMAKE_USE_WIN32_THREADS_INIT 0)
    set(CMAKE_USE_PTHREADS_INIT 1)
    set(THREADS_PREFER_PTHREAD_FLAG ON)
ENDIF()

set(RD_FETCH_PATH "" CACHE STRING "Local RD fetch path")

if (RD_FETCH_PATH STREQUAL "")
    message(STATUS "Fetch RD ${RD_VERSION} from GitHub")
    FetchContent_Declare(
            rd
            GIT_REPOSITORY https://github.com/JetBrains/rd.git
            GIT_TAG        ${RD_VERSION}
            GIT_SHALLOW    ON
    )
else ()
    message(STATUS "Fetch RD from ${RD_FETCH_PATH}")
    FetchContent_Declare(rd SOURCE_DIR ${RD_FETCH_PATH})
endif ()

FetchContent_Populate(rd)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_INSTALL_PUBLIC_HEADER "${CMAKE_CURRENT_LIST_DIR}/export/include")
set(CMAKE_INSTALL_PUBLIC_HEADER_THIRDPARTY "${CMAKE_INSTALL_PUBLIC_HEADER}/thirdparty")

if (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -pedantic")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_GLIBCXX_DEBUG")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2")
    add_compile_options(
            -Wno-unused-variable
            -Wno-unknown-pragmas            # autogenerated msvc pragmas
    )
    if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.0.0")
            message(FATAL_ERROR "Insufficient clang version")
        endif ()
    endif ()
    if (MINGW)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wa,-mbig-obj")
    endif ()
elseif (MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj")
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_compile_options(
            /wd4996     # POSIX name is deprecated
    )
endif ()

# pch are not working on clang for now, need investigation
if (MSVC)
    option(ENABLE_PCH_HEADERS "Enable precompiled headers" ON)
else ()
    option(ENABLE_PCH_HEADERS "Enable precompiled headers" OFF)
endif ()
if (ENABLE_PCH_HEADERS)
    set(PCH_CPP_OPT pch.cpp)
else ()
    set(PCH_CPP_OPT "")
endif ()

set(RD_STATIC ON CACHE BOOL "Add rd_framework_cpp as static lib" FORCE)

add_subdirectory(${rd_SOURCE_DIR}/rd-cpp/thirdparty ${rd_BINARY_DIR}/thirdparty)
add_subdirectory(${rd_SOURCE_DIR}/rd-cpp/src/rd_core_cpp ${rd_BINARY_DIR}/rd_core_cpp)
add_subdirectory(${rd_SOURCE_DIR}/rd-cpp/src/rd_framework_cpp ${rd_BINARY_DIR}/rd_framework_cpp)
add_subdirectory(rd-model)
add_subdirectory(rd-host)
add_subdirectory(renderdoc-service)
